
import { toast } from '@/components/ui/sonner';
import { Subscription } from '@/types/ransomware';
import { supabase } from '@/integrations/supabase/client';
import { checkRateLimit, logSubscriptionAttempt } from '@/services/subscriptionService';

export const useSubscriptionOperations = (
  setSubscriptions: React.Dispatch<React.SetStateAction<Subscription[]>>,
  setLoading: React.Dispatch<React.SetStateAction<boolean>>
) => {
  const addSubscription = async (email: string, countries: string[] | null) => {
    try {
      setLoading(true);
      console.log("üìù Starting subscription process for:", email);

      // Check rate limiting
      const withinLimit = await checkRateLimit(email);
      if (!withinLimit) {
        toast.error("ƒê√£ ƒë·∫°t gi·ªõi h·∫°n ƒëƒÉng k√Ω", {
          description: "B·∫°n ch·ªâ c√≥ th·ªÉ th·ª≠ ƒëƒÉng k√Ω t·ªëi ƒëa 3 l·∫ßn trong 24 gi·ªù."
        });
        return;
      }

      // Log the attempt
      await logSubscriptionAttempt(email);

      // Check if email already exists
      const { data: existing } = await supabase
        .from('subscriptions')
        .select('id, is_active')
        .eq('email', email)
        .single();

      if (existing) {
        if (existing.is_active) {
          toast.error("Email ƒë√£ ƒë∆∞·ª£c ƒëƒÉng k√Ω", {
            description: "Email n√†y ƒë√£ ƒë∆∞·ª£c ƒëƒÉng k√Ω ƒë·ªÉ nh·∫≠n th√¥ng b√°o."
          });
          return;
        } else {
          console.log("‚ôªÔ∏è Reactivating existing subscription for:", email);
          // Reactivate subscription
          const { error: updateError } = await supabase
            .from('subscriptions')
            .update({ 
              is_active: true, 
              countries: countries,
              updated_at: new Date().toISOString() 
            })
            .eq('id', existing.id);

          if (updateError) throw updateError;

          toast.success("ƒêƒÉng k√Ω ƒë√£ ƒë∆∞·ª£c k√≠ch ho·∫°t l·∫°i!");
          return;
        }
      }

      // Create new subscription
      console.log("üÜï Creating new subscription for:", email);
      const { data: newSubscription, error } = await supabase
        .from('subscriptions')
        .insert({
          email,
          countries: countries || null,
        })
        .select()
        .single();

      if (error) throw error;
      console.log("‚úÖ Subscription created successfully:", newSubscription.id);

      // Send welcome email using Supabase functions
      console.log("üìß Sending welcome email to:", email);
      const { data: emailResponse, error: emailError } = await supabase.functions.invoke('send-welcome-email', {
        body: {
          email,
          countries: countries || undefined,
          unsubscribe_token: newSubscription.unsubscribe_token
        }
      });

      if (emailError) {
        console.error('‚ùå Failed to send welcome email:', emailError);
        toast.error("ƒêƒÉng k√Ω th√†nh c√¥ng nh∆∞ng kh√¥ng th·ªÉ g·ª≠i email x√°c nh·∫≠n", {
          description: "B·∫°n ƒë√£ ƒë∆∞·ª£c ƒëƒÉng k√Ω th√†nh c√¥ng nh∆∞ng c√≥ l·ªói khi g·ª≠i email."
        });
      } else {
        console.log("‚úÖ Welcome email sent successfully:", emailResponse);
        toast.success("ƒêƒÉng k√Ω th√†nh c√¥ng!", {
          description: "B·∫°n s·∫Ω nh·∫≠n ƒë∆∞·ª£c email x√°c nh·∫≠n v√† th√¥ng b√°o khi c√≥ n·∫°n nh√¢n m·ªõi."
        });
      }

      // Update local state
      setSubscriptions(prev => [...prev, {
        id: newSubscription.id,
        email: newSubscription.email,
        verified: true, // No verification needed per requirements
        createdAt: newSubscription.created_at,
        countries: newSubscription.countries || undefined,
        unsubscribeToken: newSubscription.unsubscribe_token,
      }]);

    } catch (error) {
      console.error("üí• Failed to add subscription:", error);
      toast.error("Kh√¥ng th·ªÉ ƒëƒÉng k√Ω", {
        description: "ƒê√£ x·∫£y ra l·ªói khi ƒëƒÉng k√Ω. Vui l√≤ng th·ª≠ l·∫°i sau."
      });
    } finally {
      setLoading(false);
    }
  };

  // These functions are kept for compatibility but not used in new flow
  const verifySubscription = async (token: string): Promise<boolean> => {
    return true; // No verification needed
  };

  const unsubscribe = async (token: string): Promise<boolean> => {
    try {
      const { data, error } = await supabase.functions.invoke('unsubscribe', {
        body: { token }
      });
      return !error;
    } catch (error) {
      console.error("Failed to unsubscribe:", error);
      return false;
    }
  };

  const getVerificationLink = (email: string): string | undefined => {
    return undefined; // No verification needed
  };

  return {
    addSubscription,
    verifySubscription,
    unsubscribe,
    getVerificationLink
  };
};
